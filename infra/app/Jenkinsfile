pipeline {
    agent any

    parameters {
        string(name: "ENVIRONMENT", defaultValue: "dev")
        string(name: "PROJECT", defaultValue: "ephemeralenv")
        string(name: "EPHEMERAL_ENV_ID", defaultValue: "1")
        string(name: "STORAGE_ACCOUNT_RESOURCE_GROUP_NAME", defaultValue: "ephemeralenv-tfstate")
        string(name: "STORAGE_ACCOUNT_NAME", defaultValue: "ephemeralenvtfstatesa")
        string(name: "APP_CONTAINER_NAME", defaultValue: "ephemeralenv-app-tfstate")
        string(name: "MAIN_CONTAINER_NAME", defaultValue: "ephemeralenv-main-tfstate")
        booleanParam(name: "DESTROY", defaultValue: false)
    }

    environment {
        ACR_NAME            = 'devephemeralenvcr'
        RESOURCE_GROUP_NAME = "${env.ENVIRONMENT}-${env.PROJECT}-rg"
        DNS_ZONE_NAME       = "${ENVIRONMENT}.${PROJECT}.pdz.azure.com"

        // Terraform vars
        TF_CLI_ARGS          = "-no-color"
        TF_CLI_ARGS_apply    = "-auto-approve"
        TF_CLI_ARGS_destroy  = "-auto-approve"
        TF_PLAN_FILE         = "apply.tfplan"
        TF_DESTROY_PLAN_FILE = "destroy.tfplan"
        
        // tfvars
        TF_VAR_environment                            = "${env.ENVIRONMENT}"
        TF_VAR_project                                = "${env.PROJECT}"
        TF_VAR_environment_id                         = "${env.EPHEMERAL_ENV_ID}"
        TF_VAR_main_remote_state_resource_group_name  = "${env.STORAGE_ACCOUNT_RESOURCE_GROUP_NAME}"
        TF_VAR_main_remote_state_storage_account_name = "${env.STORAGE_ACCOUNT_NAME}"
        TF_VAR_main_remote_state_container_name       = "${env.MAIN_CONTAINER_NAME}"
    }

    stages {

        stage('Build') {

            when {
                environment name: "DESTROY", value: "false"
            }

            parallel {

                stage('Build Employees') {
                    steps {
                        script {
                            dir("source/employees") {
                                sh './gradlew clean build jar'
                            }
                        }
                    }
                }

                stage('Build Payroll') {
                    steps {
                        script {
                            dir("source/payroll") {
                                sh './gradlew clean build jar'
                            }
                        }
                    }
                }
            }
        }

        stage('Test') {

            when {
                environment name: "DESTROY", value: "false"
            }

            parallel {

                stage('Test Employees') {
                    steps {
                        script {
                            dir("source/employees") {
                                sh './gradlew test'
                            }
                        }
                    }
                }

                stage('Test Payroll') {
                    steps {
                        script {
                            dir("source/payroll") {
                                sh './gradlew test'
                            }
                        }
                    }
                }
            }
        }

        stage('Container registry Login') {

            when {
                environment name: "DESTROY", value: "false"
            }

            steps {
                script {
                    withCredentials([
                        string(credentialsId: 'ARM_CLIENT_ID', variable: 'ARM_CLIENT_ID'),
                        string(credentialsId: 'ARM_TENANT_ID', variable: 'ARM_TENANT_ID'),
                        string(credentialsId: 'ARM_CLIENT_SECRET', variable: 'ARM_CLIENT_SECRET')
                    ]) {
                        sh 'docker login "$ACR_NAME.azurecr.io" --username "$ARM_CLIENT_ID" --password "$ARM_CLIENT_SECRET"'
                    }
                }
            }
        }

        stage('Deploy Containers') {

            when {
                environment name: "DESTROY", value: "false"
            }

            parallel {

                stage('Deploy Employees') {

                    environment {
                        IMAGE_TAG = "${ACR_NAME}.azurecr.io/employees"
                    }

                    steps {
                        script {
                            dir("source/employees") {
                                sh 'docker build . -t "$IMAGE_TAG"'
                                sh 'docker push "$IMAGE_TAG"'
                            }
                        }
                    }
                }

                stage('Deploy Payroll') {

                    environment {
                        IMAGE_TAG = "${ACR_NAME}.azurecr.io/payroll"
                    }

                    steps {
                        script {
                            dir("source/payroll") {
                                sh 'docker build . -t "$IMAGE_TAG"'
                                sh 'docker push "$IMAGE_TAG"'
                            }
                        }
                    }
                }

                stage('Deploy DNS Sidecar') {

                    environment {
                        IMAGE_TAG = "${ACR_NAME}.azurecr.io/dns_sidecar"
                    }

                    steps {
                        script {
                            dir("source/dns_sidecar") {
                                sh 'docker build . -t "$IMAGE_TAG"'
                                sh 'docker push "$IMAGE_TAG"'
                            }
                        }
                    }
                }
            }

            post {
                always {
                    sh 'docker logout "$ACR_NAME.azurecr.io"'
                }
            }
        }

        stage('Initialize') {

            steps {
                script {
                    dir("infra/app") {
                        withCredentials([
                            string(credentialsId: 'ARM_CLIENT_ID', variable: 'ARM_CLIENT_ID'),
                            string(credentialsId: 'ARM_CLIENT_SECRET', variable: 'ARM_CLIENT_SECRET'),
                            string(credentialsId: 'ARM_TENANT_ID', variable: 'ARM_TENANT_ID'),
                            string(credentialsId: 'ARM_SUBSCRIPTION_ID', variable: 'ARM_SUBSCRIPTION_ID'),
                            string(credentialsId: 'STORAGE_ACCOUNT_ACCESS_KEY', variable: 'STORAGE_ACCOUNT_ACCESS_KEY') ]) {
                                sh '''
                                terraform init \
                                    -backend-config "resource_group_name=${STORAGE_ACCOUNT_RESOURCE_GROUP_NAME}" \
                                    -backend-config "storage_account_name=${STORAGE_ACCOUNT_NAME}" \
                                    -backend-config "container_name=${APP_CONTAINER_NAME}" \
                                    -backend-config "key=${EPHEMERAL_ENV_ID}.tfstate" \
                                    -backend-config "access_key=${STORAGE_ACCOUNT_ACCESS_KEY}"
                                '''
                        }
                    }
                }
            }
        }

        stage('Validate') {

            steps {
                script {
                    dir("infra/app") {
                        withCredentials([
                            string(credentialsId: 'ARM_CLIENT_ID', variable: 'ARM_CLIENT_ID'),
                            string(credentialsId: 'ARM_CLIENT_SECRET', variable: 'ARM_CLIENT_SECRET'),
                            string(credentialsId: 'ARM_TENANT_ID', variable: 'ARM_TENANT_ID'),
                            string(credentialsId: 'ARM_SUBSCRIPTION_ID', variable: 'ARM_SUBSCRIPTION_ID') ]) {
                                sh 'terraform validate'
                        }
                    }
                }
            }
        }

        stage('Plan') {

            when {
                environment name: "DESTROY", value: "false"
            }

            steps {
                script {
                    dir("infra/app") {
                        withCredentials([
                            string(credentialsId: 'ARM_CLIENT_ID', variable: 'ARM_CLIENT_ID'),
                            string(credentialsId: 'ARM_CLIENT_ID', variable: 'TF_VAR_client_id'),
                            string(credentialsId: 'ARM_CLIENT_SECRET', variable: 'ARM_CLIENT_SECRET'),
                            string(credentialsId: 'ARM_CLIENT_SECRET', variable: 'TF_VAR_client_secret'),
                            string(credentialsId: 'ARM_TENANT_ID', variable: 'ARM_TENANT_ID'),
                            string(credentialsId: 'ARM_TENANT_ID', variable: 'TF_VAR_tenant_id'),
                            string(credentialsId: 'ARM_SUBSCRIPTION_ID', variable: 'ARM_SUBSCRIPTION_ID'),
                            string(credentialsId: 'ARM_SUBSCRIPTION_ID', variable: 'TF_VAR_subscription_id') ]) {
                                sh 'terraform plan -out ${TF_PLAN_FILE}'
                        }
                    }
                }
            }
        }

        stage('Apply') {

            when {
                environment name: "DESTROY", value: "false"
            }

            steps {
                script {
                    dir("infra/app") {
                        withCredentials([
                            string(credentialsId: 'ARM_CLIENT_ID', variable: 'ARM_CLIENT_ID'),
                            string(credentialsId: 'ARM_CLIENT_ID', variable: 'TF_VAR_client_id'),
                            string(credentialsId: 'ARM_CLIENT_SECRET', variable: 'ARM_CLIENT_SECRET'),
                            string(credentialsId: 'ARM_CLIENT_SECRET', variable: 'TF_VAR_client_secret'),
                            string(credentialsId: 'ARM_TENANT_ID', variable: 'ARM_TENANT_ID'),
                            string(credentialsId: 'ARM_TENANT_ID', variable: 'TF_VAR_tenant_id'),
                            string(credentialsId: 'ARM_SUBSCRIPTION_ID', variable: 'ARM_SUBSCRIPTION_ID'),
                            string(credentialsId: 'ARM_SUBSCRIPTION_ID', variable: 'TF_VAR_subscription_id') ]) {
                                sh 'terraform apply ${TF_PLAN_FILE}'
                        }
                    }
                }
            }
        }

        stage('Destroy') {

            when {
                environment name: "DESTROY", value: "true"
            }

            steps {
                script {
                    dir("infra/app") {
                        withCredentials([
                            string(credentialsId: 'ARM_CLIENT_ID', variable: 'ARM_CLIENT_ID'),
                            string(credentialsId: 'ARM_CLIENT_ID', variable: 'TF_VAR_client_id'),
                            string(credentialsId: 'ARM_CLIENT_SECRET', variable: 'ARM_CLIENT_SECRET'),
                            string(credentialsId: 'ARM_CLIENT_SECRET', variable: 'TF_VAR_client_secret'),
                            string(credentialsId: 'ARM_TENANT_ID', variable: 'ARM_TENANT_ID'),
                            string(credentialsId: 'ARM_TENANT_ID', variable: 'TF_VAR_tenant_id'),
                            string(credentialsId: 'ARM_SUBSCRIPTION_ID', variable: 'ARM_SUBSCRIPTION_ID'),
                            string(credentialsId: 'ARM_SUBSCRIPTION_ID', variable: 'TF_VAR_subscription_id') ]) {

                                sh 'terraform plan -destroy -out "${TF_DESTROY_PLAN_FILE}"'
                                input 'Destroy?'
                                sh 'terraform apply "${TF_DESTROY_PLAN_FILE}"'

                                // delete dns records of this environment
                                sh '''
                                    az login --service-principal \
                                        -u "${ARM_CLIENT_ID}" \
                                        -p "${ARM_CLIENT_SECRET}" \
                                        --tenant "${ARM_TENANT_ID}"
                                    az network private-dns record-set a list --resource-group "${RESOURCE_GROUP_NAME}" \
                                        --zone-name "${DNS_ZONE_NAME}" \
                                        --query "[?contains(name, '-${EPHEMERAL_ENV_ID}')].name" -o tsv |
                                        xargs -I {} az network private-dns record-set a delete --name {} \
                                        --resource-group "${RESOURCE_GROUP_NAME}" \
                                        --zone-name "${DNS_ZONE_NAME}" \
                                        --yes
                                '''
                        }
                    }
                }
            }

            post {
                always {
                    sh 'az logout'
                }
            }
        }

    }
}